# Top level syntax
file		-> file def | def
def			-> struct | enum | function | let
struct		-> 'struct' '{' UP memberlist DN '}' NEWLINE
memberlist	-> [memberlist NEWLINE INDENT] ident type
enum		-> 'enum' '{' UP variantlist DN '}' NEWLINE
variantlist	-> [variantlist NEWLINE INDENT] variant
variant		-> ident [UP NEWLINE memberlist DN NEWLINE]
function	-> [fn | ext] ident [< templatelist >] '(' paramlist ')' [type] NEWLINE [UP stmtlist DN]
templatelist-> templatelist , ident | ident
paramlist	-> paramlist , ident type | ident type

# Statement syntax
stmtlist	-> stmtlist stmt | stmt
stmt		-> if | let | while | for | return | break | continue | match | exprstmt

# Expression syntax
expr		-> postfix = expr | condexpr
condexpr	-> 'if' expr 'then' expr ['else' expr] | logicor
logicor		-> logicor || logicand | logicand
logicand	-> logicand && equality | equality
equality	-> equality eqop relational | relational
eqop		-> == | !=
relational	-> relational relop bitor | bitor
relop		-> > | >= | < | <=
bitor		-> bitor '|' bitxor | bitxor
bitxor		-> bitxor ^ bitand | bitand
bitand		-> bitand & bitshift | bitshift
bitshift	-> bitshift shiftop additive | additive
shiftop		-> << | >>
additive	-> additive addop multiplicative | multiplicative
addop		-> + | -
multiplicative -> multiplicative mulop prefix | prefix
mulop		-> * | / | %
prefix		-> prefixop prefix | builtin
prefixop	-> + | - | ! | ~ | & | *
builtin		-> builtinfn '(' expr ')' | postfix
builtinfn	-> len | type | sizeof | alignof
postfix		-> grouping postfixop | grouping
postfixop	-> '->' | . | '(' arglist ')' | '[' expr ']'
grouping	-> '(' expr ')' | '{' UP stmtlist DN '}' | factor
factor		-> literal | initexpr | ident
literal		-> number | string | character
initexpr	-> ident '{' UP initlist DN '}'
arglist		-> arglist ',' expr | expr
initlist	-> [initlist NEWLINE INDENT] initmember
initmember	-> ident = expr | expr

# Type syntax
type		-> typelvl type | typesentinal
typelvl		-> const | mut | '&' | '&[]' | '*' | '*[]' | '[' postfix ']'
typesentinal-> podtype | ident
podtype		-> 'i8' | 'i16' | 'i32' | 'i64'
			 | 'u8' | 'u16' | 'u32' | 'u64'
			 | 'char' | 'bool'

# Token syntax
# TODO

